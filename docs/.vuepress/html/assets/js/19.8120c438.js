(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{366:function(t,r,s){"use strict";s.r(r);var v=s(42),_=Object(v.a)({},(function(){var t=this,r=t.$createElement,s=t._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"设计原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计原则"}},[t._v("#")]),t._v(" 设计原则")]),t._v(" "),s("h2",{attrs:{id:"对象三大特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象三大特性"}},[t._v("#")]),t._v(" 对象三大特性")]),t._v(" "),s("ul",[s("li",[t._v("继承 封装 多态")])]),t._v(" "),s("h2",{attrs:{id:"单一指责原则-srp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单一指责原则-srp"}},[t._v("#")]),t._v(" 单一指责原则 SRP")]),t._v(" "),s("p",[t._v("Single ResponSibility Principle"),s("br"),t._v("\n对一个类（方法、对象）来说，应该仅有一个引起它变化的原因，"),s("strong",[t._v("一个对象只做一件事")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("单一职责原则可以让我们对对象的维护变得简单，如果一个对象具有多个职责的话，那么如果一个职责的逻辑需要修改，那么势必会影响到其他职责的代码。如果一个对象具有多种职责，职责之间相互耦合，对一个职责的修改会影响到其他职责的实现，这就是属于模块内低内聚高耦合的情况。负责的职责越多，耦合越强，对模块的修改就越来越危险。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("优点")]),s("br"),t._v("\n降低单个类（方法、对象）的复杂度，提高可读性和可维护性，功能之间的界限更清晰；\n类（方法、对象）之间根据功能被分为更小的粒度，有助于代码的复用；")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("缺点")]),s("br"),t._v("\n增加系统中类（方法、对象）的个数，实际上也增加了这些对象之间相互联系的难度，同时也引入了额外的复杂度。")])])]),t._v(" "),s("h2",{attrs:{id:"开放封闭原则-ocp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开放封闭原则-ocp"}},[t._v("#")]),t._v(" 开放封闭原则 OCP")]),t._v(" "),s("p",[t._v("Open－Close Principle"),s("br"),t._v("\n又称为迪米特原则 （Law of Demeter, LOD）,"),s("strong",[t._v("一个对象应该对其他对象有最少的了解")])]),t._v(" "),s("p",[t._v("通俗地讲，"),s("strong",[t._v("一个类应该对自己需要耦合或调用的类知道得最少")]),t._v("，类的内部如何实现、如何复杂都与调用者或者依赖者没关系，调用者或者依赖者只需要知道他需要的方法即可，其他的我一概不关心。类与类之间的关系越密切，耦合度越大，当一个类发生改变时，对另一个类的影响也越大。")]),t._v(" "),s("p",[t._v("通常为了减少对象之间的联系，是通过"),s("strong",[t._v("引入一个第三者")]),t._v("来帮助进行通信，阻隔对象之间的直接通信，从而减少耦合。")]),t._v(" "),s("ul",[s("li",[s("p",[s("strong",[t._v("优点")]),s("br"),t._v("\n降低类（方法、对象）之间不必要的依赖，减少耦合。")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("缺点")]),s("br"),t._v("\n类（方法、对象）之间不直接通信也会经过一个第三者来通信，那么就要权衡引入第三者带来的复杂度是否值得。")])])])])}),[],!1,null,null,null);r.default=_.exports}}]);